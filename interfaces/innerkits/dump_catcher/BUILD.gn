# Copyright (c) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/hiviewdfx/faultloggerd/faultloggerd.gni")

dumpcatcher_sources = [ "dfx_dump_catcher.cpp" ]

if (defined(ohos_lite)) {
  shared_library("libdfx_dumpcatcher") {
    visibility = [ "*:*" ]

    include_dirs = [
      "include",
      "$c_utils_include_path",
      "$faultloggerd_interfaces_path/common",
      "$faultloggerd_interfaces_path/innerkits/backtrace/include",
      "$faultloggerd_path/common",
      "$faultloggerd_path/common/dfxlog",
      "$faultloggerd_path/common/dfxutil",
      "$faultloggerd_path/frameworks/unwinder/include",
      "$faultloggerd_path/interfaces/innerkits/faultloggerd_client/include",
      "$faultloggerd_path/interfaces/innerkits/procinfo/include",
      "$hilog_lite_include_path",
      "//third_party/libunwind/include",
      "//third_party/libunwind/src",
    ]

    if (target_cpu == "arm") {
      include_dirs += [ "//third_party/libunwind/include/tdep-arm" ]
    } else if (target_cpu == "arm64") {
      include_dirs += [ "//third_party/libunwind/include/tdep-aarch64" ]
    } else if (target_cpu == "x64" || target_cpu == "x86_64") {
      include_dirs += [ "//third_party/libunwind/include/tdep-x86_64" ]
    } else if (target_cpu == "mipsel") {
      include_dirs += [ "//third_party/libunwind/include/tdep-mips" ]
    }

    sources = dumpcatcher_sources

    defines = [
      "HAVE_CONFIG_H",
      "HAVE_ELF_H",
      "HAVE_LINK_H",
    ]

    deps = [
      "$faultloggerd_path/common/dfxlog:static_common_log",
      "$faultloggerd_path/common/dfxutil:dfx_util",
      "$faultloggerd_path/interfaces/innerkits/backtrace:libbacktrace_local",
      "$faultloggerd_path/interfaces/innerkits/faultloggerd_client:libfaultloggerd",
      "$faultloggerd_path/interfaces/innerkits/procinfo:libdfx_procinfo",
      "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared",
      "//third_party/bounds_checking_function:libsec_shared",
      "//third_party/libunwind:libunwind",
    ]
  }
} else {
  config("dfx_dump_catcher_config") {
    visibility = [ "*:*" ]

    include_dirs = [ "include" ]
    defines = [
      "HAVE_CONFIG_H",
      "HAVE_ELF_H",
      "HAVE_LINK_H",
    ]
  }

  ohos_shared_library("libdfx_dumpcatcher") {
    public_configs = [
      ":dfx_dump_catcher_config",
      "$faultloggerd_path/common/build:coverage_flags",
    ]
    sources = dumpcatcher_sources
    include_dirs = [
      "$faultloggerd_interfaces_path/common",
      "$faultloggerd_path/common",
      "//third_party/libunwind/include",
      "//third_party/libunwind/src",
    ]
    if (target_cpu == "arm") {
      include_dirs += [ "//third_party/libunwind/include/tdep-arm" ]
    } else if (target_cpu == "arm64") {
      include_dirs += [ "//third_party/libunwind/include/tdep-aarch64" ]
    } else if (target_cpu == "x64" || target_cpu == "x86_64") {
      include_dirs += [ "//third_party/libunwind/include/tdep-x86_64" ]
    } else if (target_cpu == "mipsel") {
      include_dirs += [ "//third_party/libunwind/include/tdep-mips" ]
    }
    version_script = "libdfx_dumpcatcher.map"
    deps = [
      "$faultloggerd_path/common/dfxlog:static_common_log",
      "$faultloggerd_path/common/dfxutil:dfx_util",
      "$faultloggerd_path/interfaces/innerkits/backtrace:libbacktrace_local",
      "$faultloggerd_path/interfaces/innerkits/faultloggerd_client:libfaultloggerd",
      "$faultloggerd_path/interfaces/innerkits/procinfo:libdfx_procinfo",
    ]

    external_deps = [
      "c_utils:utils",
      "hilog:libhilog",
    ]
    install_images = [
      "system",
      "updater",
    ]
    innerapi_tags = [
      "chipsetsdk_indirect",
      "platformsdk_indirect",
    ]
    part_name = "faultloggerd"
    subsystem_name = "hiviewdfx"
  }
}
