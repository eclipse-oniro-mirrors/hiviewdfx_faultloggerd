# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/hiviewdfx/faultloggerd/faultloggerd.gni")

if (defined(ohos_lite)) {
  shared_library("dfx_signalhandler") {
    defines = [
      "is_ohos=${is_ohos}",
      "is_ohos_lite",
    ]
    visibility = [ "*:*" ]
    include_dirs = [
      "include",
      "$c_utils_include_path",
      "$faultloggerd_interfaces_path/common",
      "$faultloggerd_path/common/cutil",
      "$faultloggerd_path/common/dfxlog",
    ]
    sources = [
      "dfx_dumprequest.c",
      "dfx_signal_handler.c",
      "dfx_signalhandler_exception.c",
    ]

    deps = [ "$faultloggerd_path/common/cutil:dfx_cutil" ]

    external_deps = [ "bounds_checking_function:libsec_shared" ]

    cflags = [
      "-fPIC",
      "-fno-builtin",
      "-DDFX_NO_PRINT_LOG",
    ]
  }
} else {
  config("dfx_signal_handler_config") {
    visibility = [ "*:*" ]
    include_dirs = [
      "include",
      "$faultloggerd_interfaces_path/common",
    ]
  }

  ohos_shared_library("dfx_signalhandler") {
    branch_protector_ret = "pac_ret"
    public_configs = [
      ":dfx_signal_handler_config",
      "$faultloggerd_common_path/build:coverage_flags",
    ]
    include_dirs = [
      "include",
      "$faultloggerd_common_path/cutil",
      "$faultloggerd_common_path/dfxlog",
      "$faultloggerd_interfaces_path/common",
    ]
    defines = [ "DFX_LOG_HILOG_BASE" ]
    version_script = "libdfx_signalhandler.map"
    sources = [
      "dfx_dumprequest.c",
      "dfx_signal_handler.c",
      "dfx_signalhandler_exception.c",
    ]

    deps = [
      "$faultloggerd_common_path/cutil:dfx_cutil",
      "$faultloggerd_common_path/dfxlog:dfx_hilog_base",
    ]

    external_deps = [
      "c_utils:utils",
      "hilog:libhilog_base",
    ]

    innerapi_tags = [
      "chipsetsdk_indirect",
      "platformsdk_indirect",
    ]
    install_enable = true
    install_images = [
      "system",
      "updater",
    ]

    part_name = "faultloggerd"
    subsystem_name = "hiviewdfx"
  }
}
