# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/hiviewdfx/faultloggerd/faultloggerd.gni")
import("//build/config/features.gni")
import("//build/test.gni")

# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/hiviewdfx/faultloggerd/faultloggerd.gni")

if (defined(ohos_lite)) {
  import("//build/lite/config/component/lite_component.gni")
  import("//build/lite/config/test.gni")
  if (ohos_build_type == "debug") {
    unittest("test_service") {
      output_extension = "bin"
      output_dir = "$root_out_dir/test/unittest/faultloggerd/faultloggerd"

      include_dirs = [
        "$c_utils_include_path",
        "$faultloggerd_path/services",
        "$hilog_lite_include_path",
        "$faultloggerd_path/tools/process_dump",
        "$faultloggerd_path/interfaces/innerkits/faultloggerd_client/include",
        "$faultloggerd_path/interfaces/innerkits/faultloggerd_client",
        "$faultloggerd_interfaces_path/common",
        "$faultloggerd_interfaces_path/innerkits/procinfo/include",
        "$faultloggerd_path/common/cutil",
        "$faultloggerd_path/common/dfxlog",
        "$faultloggerd_path/common/dfxutil",
        "$faultloggerd_path/test/utils",
      ]

      sources = [
        "$c_utils_src_path/directory_ex.cpp",
        "$faultloggerd_interfaces_path/innerkits/faultloggerd_client/faultloggerd_client.cpp",
        "$faultloggerd_interfaces_path/innerkits/faultloggerd_client/faultloggerd_socket.cpp",
        "$faultloggerd_path/services/epoll_manager.cpp",
        "$faultloggerd_path/services/fault_logger_config.cpp",
        "$faultloggerd_path/services/fault_logger_daemon.cpp",
        "$faultloggerd_path/services/fault_logger_server.cpp",
        "$faultloggerd_path/services/fault_logger_service.cpp",
        "$faultloggerd_path/services/temp_file_manager.cpp",
        "faultlogger_server_test.cpp",
        "faultloggerd_test.cpp",
        "temp_file_manager_test.cpp",
      ]

      deps = [
        "$faultloggerd_common_path/trace:dfx_trace",
        "$faultloggerd_interfaces_path/innerkits/procinfo:libdfx_procinfo",
        "$faultloggerd_path/common/dfxlog:dfx_hilog",
        "$faultloggerd_path/common/dfxutil:dfx_util",
        "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared",
      ]

      external_deps = [
        "hilog_lite:hilog_shared",
        "init:libbegetutil",
      ]

      defines = [
        "is_ohos_lite",
        "FAULTLOGGERD_TEST",
      ]

      if (faultloggerd_hisysevent_enable) {
        deps += [ "hisysevent:libhisysevent" ]
      } else {
        defines += [ "HISYSEVENT_DISABLE" ]
      }
    }
  }

  group("unittest") {
    if (ohos_build_type == "debug") {
      deps = [ ":test_service" ]
    }
  }
} else {
  import("//build/config/features.gni")
  import("//build/test.gni")

  ohos_unittest("test_service") {
    module_out_path = "faultloggerd/faultloggerd/services"
    visibility = [ "*:*" ]
    include_dirs = [
      "$faultloggerd_interfaces_path/common",
      "$faultloggerd_path/common/dfxlog",
      "$faultloggerd_path/interfaces/innerkits/faultloggerd_client",
      "$faultloggerd_path/interfaces/innerkits/faultloggerd_client/include",
      "$faultloggerd_interfaces_path/innerkits/procinfo/include",
      "$faultloggerd_path/services",
      "$faultloggerd_path/test/utils",
    ]
    sources = [
      "$faultloggerd_path/interfaces/innerkits/faultloggerd_client/faultloggerd_client.cpp",
      "$faultloggerd_path/interfaces/innerkits/faultloggerd_client/faultloggerd_socket.cpp",
      "faultlogger_server_test.cpp",
      "faultloggerd_client_test.cpp",
      "faultloggerd_test.cpp",
      "temp_file_manager_test.cpp",
    ]
    cflags_cc = [ "-Dprivate=public" ]
    defines = [ "FAULTLOGGERD_TEST" ]
    deps = [
      "$faultloggerd_frameworks_path/localhandler:dfx_local_handler_src",
      "$faultloggerd_interfaces_path/innerkits/procinfo:libdfx_procinfo",
      "$faultloggerd_path/common/dfxlog:dfx_hilog_base",
      "$faultloggerd_path/common/dfxutil:dfx_util",
      "$faultloggerd_path/common/trace:dfx_trace",
      "$faultloggerd_path/services:faultloggerd_test_src",
      "$faultloggerd_path/test/utils:dfx_test_util",
    ]

    external_deps = [
      "bounds_checking_function:libsec_shared",
      "c_utils:utils",
      "ffrt:libffrt",
      "hilog:libhilog_base",
      "hisysevent:libhisysevent",
      "hitrace:hitrace_meter",
      "init:libbegetutil",
      "jsoncpp:jsoncpp",
    ]

    if (build_selinux) {
      external_deps += [ "selinux:libselinux" ]
      cflags_cc += [ "-DHAS_LIB_SELINUX" ]
    }
  }

  group("unittest") {
    testonly = true
    deps = [ ":test_service" ]
  }
}
