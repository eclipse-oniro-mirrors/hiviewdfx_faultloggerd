# Copyright (c) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/hiviewdfx/faultloggerd/faultloggerd.gni")

if (defined(ohos_lite)) {
  import("//build/lite/config/component/lite_component.gni")
  import("//build/lite/config/test.gni")

  if (ohos_build_type == "debug") {
    unittest("test_processdump") {
      output_extension = "bin"
      output_dir = "$root_out_dir/test/unittest/faultloggerd"

      include_dirs = [
        "$c_utils_include_path",
        "$faultloggerd_common_path/dfxutil",
        "$faultloggerd_interfaces_path/common",
        "$faultloggerd_interfaces_path/innerkits/procinfo/include",
        "$faultloggerd_interfaces_path/innerkits/unwinder/include",
        "$faultloggerd_path/example",
        "$faultloggerd_path/test/utils",
        "$faultloggerd_path/tools/process_dump",
        "$faultloggerd_path/tools/process_dump/coredump",
        "$hilog_lite_include_path",
      ]

      sources = [
        "multithread_constructor.c",
        "process_dump_test.cpp",
      ]
      sources += [ "$c_utils_src_path/directory_ex.cpp" ]

      deps = [
        "$faultloggerd_interfaces_path/innerkits/procinfo:libdfx_procinfo",
        "$faultloggerd_interfaces_path/innerkits/unwinder:libunwinder",
        "$faultloggerd_path/test/utils:dfx_test_util",
        "$faultloggerd_path/tools/process_dump:process_info_src",
      ]

      external_deps = [ "hilog_lite:hilog_shared" ]
    }
  }

  group("unittest") {
    if (ohos_build_type == "debug") {
      deps = [ ":test_processdump" ]
    }
  }
} else {
  import("//build/config/features.gni")
  import("//build/test.gni")

  config("module_private_config") {
    visibility = [ ":*" ]

    include_dirs = [
      "$faultloggerd_common_path/dfxutil",
      "$faultloggerd_interfaces_path/common",
      "$faultloggerd_interfaces_path/innerkits/unwinder/include",
      "$faultloggerd_path/example",
      "$faultloggerd_path/test/utils",
      "$faultloggerd_path/tools/process_dump",
      "$faultloggerd_path/tools/process_dump/coredump",
      "$faultloggerd_path/tools/process_dump/lperf",
    ]
  }

  module_output_path = "faultloggerd/faultloggerd/process_dump"

  ohos_unittest("test_processdump") {
    module_out_path = module_output_path
    sources = [
      "$faultloggerd_path/tools/process_dump/lperf/lperf_event_record.cpp",
      "$faultloggerd_path/tools/process_dump/lperf/lperf_events.cpp",
      "dfx_processdump_test.cpp",
      "dump_info_header_test.cpp",
      "dump_utils_test.cpp",
      "fault_stack_test.cpp",
      "lperf_event_record_test.cpp",
      "lperf_events_test.cpp",
      "maps_test.cpp",
      "memory_near_register_test.cpp",
      "multithread_constructor.c",
      "open_files_test.cpp",
      "process_dump_config_test.cpp",
      "process_dump_test.cpp",
      "registers_test.cpp",
      "thread_dump_info_test.cpp",
    ]

    if (target_cpu == "arm64") {
      sources += [
        "extra_crash_info_test.cpp",
        "submitter_stack_test.cpp",
      ]
    }

    cflags_cc = [ "-Dprivate=public" ]

    configs = [
      ":module_private_config",
      "$faultloggerd_path/common/build:coverage_flags",
    ]

    defines = [ "UNITTEST" ]

    deps = [
      "$faultloggerd_path/common/cutil:dfx_cutil",
      "$faultloggerd_path/interfaces/innerkits/async_stack:libasync_stack",
      "$faultloggerd_path/interfaces/innerkits/procinfo:dfx_procinfo_static",
      "$faultloggerd_path/interfaces/innerkits/unwinder:libunwinder_static",
      "$faultloggerd_path/test/utils:dfx_test_util",
      "$faultloggerd_path/tools/process_dump:process_info_src",
    ]
    external_deps = [
      "bundle_framework:appexecfwk_base",
      "bundle_framework:appexecfwk_core",
      "c_utils:utils",
      "googletest:gmock_main",
      "googletest:gtest_main",
      "hilog:libhilog",
      "hitrace:libhitracechain",
      "ipc:ipc_core",
      "jsoncpp:jsoncpp",
      "cJSON:cjson",
      "samgr:samgr_proxy",
      "libuv:uv",
    ]
    if (support_jsapi) {
      deps += [ "$faultloggerd_path/test/resource:FaultloggerdJsTest" ]
    }
    resource_config_file = "$faultloggerd_path/test/resource/ohos_test.xml"
  }
  group("unittest") {
    testonly = true
    deps = [ ":test_processdump" ]
  }
}
