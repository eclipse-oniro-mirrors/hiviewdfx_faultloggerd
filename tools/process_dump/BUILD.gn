# Copyright (c) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/hiviewdfx/faultloggerd/faultloggerd.gni")

processdump_sources = [
  "dfx_fault_stack.cpp",
  "dfx_logger.cpp",
  "dfx_process.cpp",
  "dfx_ring_buffer_wrapper.cpp",
  "dfx_stack_info_formatter.cpp",
  "dfx_thread.cpp",
  "process_dumper.cpp",
]

if (target_cpu == "x86_64") {
  processdump_sources += [
    "$faultloggerd_frameworks_path/unwinder/dfx_config.cpp",
    "$faultloggerd_frameworks_path/unwinder/dfx_elf.cpp",
    "$faultloggerd_frameworks_path/unwinder/dfx_frame_format.cpp",
    "$faultloggerd_frameworks_path/unwinder/dfx_maps.cpp",
    "$faultloggerd_frameworks_path/unwinder/dfx_memory.cpp",
    "$faultloggerd_frameworks_path/unwinder/dfx_memory_file.cpp",
    "$faultloggerd_frameworks_path/unwinder/dfx_ptrace.cpp",
    "$faultloggerd_frameworks_path/unwinder/dfx_regs.cpp",
    "$faultloggerd_frameworks_path/unwinder/dfx_regs_arm.cpp",
    "$faultloggerd_frameworks_path/unwinder/dfx_regs_arm64.cpp",
    "$faultloggerd_frameworks_path/unwinder/dfx_regs_x86_64.cpp",
    "$faultloggerd_frameworks_path/unwinder/dfx_signal.cpp",
    "$faultloggerd_frameworks_path/unwinder/dfx_symbols.cpp",
    "dfx_unwind_remote_emulator.cpp",
    "printer_emulator.cpp",
  ]
} else {
  processdump_sources += [
    "dfx_unwind_remote.cpp",
    "printer.cpp",
  ]
}

if (defined(ohos_lite)) {
  config("processdump_config") {
    visibility = [ "*:*" ]
    cflags = []

    defines = [
      "HAVE_CONFIG_H",
      "HAVE_ELF_H",
      "HAVE_LINK_H",
      "is_ohos_lite",
    ]

    include_dirs = [
      ".",
      "$c_utils_include_path",
      "$faultloggerd_common_path/dfxlog",
      "$faultloggerd_common_path/dfxutil",
      "$faultloggerd_interfaces_path/common",
      "$faultloggerd_interfaces_path/innerkits/faultloggerd_client/include",
      "$faultloggerd_interfaces_path/innerkits/procinfo/include",
      "$faultloggerd_interfaces_path/innerkits/unwinder/include",
      "$hilog_lite_include_path",
    ]
  }

  source_set("process_info_src") {
    sources = processdump_sources
    public_configs = [ ":processdump_config" ]

    deps = [
      "$faultloggerd_common_path/dfxlog:dfx_hilog",
      "$faultloggerd_common_path/dfxutil:dfx_util",
      "$faultloggerd_interfaces_path/innerkits/faultloggerd_client:libfaultloggerd",
      "$faultloggerd_interfaces_path/innerkits/procinfo:libdfx_procinfo",
      "$faultloggerd_interfaces_path/innerkits/unwinder:libunwinder",
      "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared",
    ]
  }

  executable("processdump") {
    sources = processdump_sources
    sources += [
      "cppcrash_reporter.cpp",
      "main.cpp",
    ]
    public_configs = [ ":processdump_config" ]

    deps = [
      "$faultloggerd_common_path/dfxlog:dfx_hilog",
      "$faultloggerd_common_path/dfxutil:dfx_util",
      "$faultloggerd_interfaces_path/innerkits/faultloggerd_client:libfaultloggerd",
      "$faultloggerd_interfaces_path/innerkits/procinfo:libdfx_procinfo",
      "$faultloggerd_interfaces_path/innerkits/unwinder:libunwinder",
      "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared",
      "//third_party/libunwind:libunwind",
    ]
  }
} else {
  config("processdump_config") {
    visibility = [ ":*" ]

    include_dirs = [
      ".",
      "$faultloggerd_interfaces_path/common",
      "$faultloggerd_interfaces_path/innerkits/procinfo/include",
      "$faultloggerd_interfaces_path/innerkits/signal_handler",
      "$faultloggerd_path/common",
    ]

    if (target_cpu == "x86_64") {
      include_dirs += [ "$faultloggerd_frameworks_path/unwinder/include" ]
    } else {
      include_dirs +=
          [ "$faultloggerd_interfaces_path/innerkits/unwinder/include" ]
    }

    cflags_cc = [ "-DRUSTC_DEMANGLE" ]

    if (processdump_minidebuginfo_enable) {
      defines = [ "PROCESSDUMP_MINIDEBUGINFO" ]
    }
  }

  ohos_source_set("process_info_src") {
    sources = processdump_sources
    configs = [
      ":processdump_config",
      "$faultloggerd_common_path/build:coverage_flags",
      "//third_party/jsoncpp:jsoncpp_public_config",
    ]

    deps = [
      "$faultloggerd_common_path/dfxlog:dfx_hilog",
      "$faultloggerd_common_path/dfxutil:dfx_util",
      "$faultloggerd_interfaces_path/innerkits/faultloggerd_client:libfaultloggerd",
      "$faultloggerd_interfaces_path/innerkits/procinfo:libdfx_procinfo",
      "//third_party/jsoncpp:jsoncpp",
    ]

    if (target_cpu == "x86_64") {
      deps += [ "//third_party/libunwind:libunwind" ]
    } else {
      deps += [ "$faultloggerd_interfaces_path/innerkits/unwinder:libunwinder" ]
    }

    external_deps = [
      "c_utils:utils",
      "hilog:libhilog",
    ]

    part_name = "faultloggerd"
    subsystem_name = "hiviewdfx"
  }

  ohos_executable("processdump") {
    install_enable = true
    configs = [
      ":processdump_config",
      "$faultloggerd_path/common/build:coverage_flags",
      "//third_party/jsoncpp:jsoncpp_public_config",
    ]
    sources = processdump_sources
    sources += [
      "cppcrash_reporter.cpp",
      "main.cpp",
    ]

    cflags_cc = [ "-DDEBUG_CRASH_LOCAL_HANDLER" ]

    deps = [
      "$faultloggerd_common_path/dfxlog:dfx_hilog_base",
      "$faultloggerd_common_path/dfxutil:dfx_util",
      "$faultloggerd_interfaces_path/innerkits/faultloggerd_client:libfaultloggerd",
      "$faultloggerd_interfaces_path/innerkits/procinfo:libdfx_procinfo",
      "$faultloggerd_interfaces_path/innerkits/signal_handler:dfx_local_handler",
      "//third_party/jsoncpp:jsoncpp",
    ]

    if (target_cpu == "x86_64") {
      deps += [ "//third_party/libunwind:libunwind" ]
    } else {
      deps += [ "$faultloggerd_interfaces_path/innerkits/unwinder:libunwinder" ]
    }

    external_deps = [
      "c_utils:utils",
      "hilog:libhilog_base",
    ]

    install_images = [
      "system",
      "updater",
    ]

    part_name = "faultloggerd"
    subsystem_name = "hiviewdfx"
  }
}
