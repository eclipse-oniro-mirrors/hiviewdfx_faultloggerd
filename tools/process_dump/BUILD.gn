# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/hiviewdfx/faultloggerd/faultloggerd.gni")
import("//build/ohos.gni")

config("processdump_config") {
  visibility = [ ":*" ]

  include_dirs = [
    ".",
    "//base/hiviewdfx/faultloggerd/common",
    "//utils/native/base/include",
    "//developtools/bytrace_standard/interfaces/innerkits/native/include",
  ]
}

ohos_source_set("process_info_src") {
  if (use_musl) {
    cflags = [ "-DDFX_LOCAL_UNWIND" ]
  } else {
    cflags = []
  }

  configs = [ ":processdump_config" ]
  sources = [
    "dfx_config.cpp",
    "dfx_dump_writer.cpp",
    "dfx_elf.cpp",
    "dfx_frames.cpp",
    "dfx_log.cpp",
    "dfx_maps.cpp",
    "dfx_process.cpp",
    "dfx_signal.cpp",
    "dfx_thread.cpp",
    "dfx_unwind_remote.cpp",
    "dfx_util.cpp",
    "process_dumper.cpp",
  ]

  if (target_cpu == "arm") {
    sources += [ "dfx_regs_arm.cpp" ]
    #cflags += [ "-D__arm__" ]
  } else if (target_cpu == "arm64") {
    sources += [ "dfx_regs_arm64.cpp" ]
    cflags += [ "-D__aarch64__" ]
  } else if (target_cpu == "x86_64") {
    sources += [ "dfx_regs_x86_64.cpp" ]
    cflags += [ "-D__x86_64__" ]
  }

  deps = [
    "$faultloggerd_path/interfaces/innerkits/faultloggerd_client:libfaultloggerd",
    "//third_party/libunwind:libunwind",
  ]

  external_deps = [
    "bytrace_standard:bytrace_core",
    "hilog_native:libhilog",
    "utils_base:utils",
  ]
}

ohos_executable("processdump") {
  install_enable = true
  configs = [ ":processdump_config" ]
  sources = [
    "cppcrash_reporter.cpp",
    "dfx_config.cpp",
    "dfx_dump_writer.cpp",
    "dfx_elf.cpp",
    "dfx_frames.cpp",
    "dfx_log.cpp",
    "dfx_maps.cpp",
    "dfx_process.cpp",
    "dfx_signal.cpp",
    "dfx_thread.cpp",
    "dfx_unwind_remote.cpp",
    "dfx_util.cpp",
    "main.cpp",
    "process_dumper.cpp",
  ]

  if (target_cpu == "arm") {
    sources += [ "dfx_regs_arm.cpp" ]
    cflags = [ "-D__arm__" ]
  } else if (target_cpu == "arm64") {
    sources += [ "dfx_regs_arm64.cpp" ]
    cflags = [ "-D__aarch64__" ]
  } else if (target_cpu == "x86_64") {
    sources += [ "dfx_regs_x86_64.cpp" ]
    cflags = [ "-D__x86_64__" ]
  }

  deps = [
    "$faultloggerd_path/interfaces/innerkits/faultloggerd_client:libfaultloggerd",
    "//third_party/libunwind:libunwind",
  ]

  external_deps = [
    "bytrace_standard:bytrace_core",
    "hilog_native:libhilog",
    "utils_base:utils",
  ]

  part_name = "faultloggerd"
  subsystem_name = "hiviewdfx"
}
