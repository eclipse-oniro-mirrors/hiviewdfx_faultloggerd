# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/hiviewdfx/faultloggerd/faultloggerd.gni")

backtrace_local_sources = [
  "backtrace_local_static.cpp",
  "backtrace_local_thread.cpp",
]

if (defined(ohos_lite)) {
  source_set("backtrace_local_src") {
    visibility = [ "*:*" ]

    include_dirs = [
      "//commonlibrary/c_utils/base/include",
      "$faultloggerd_path/common",
      "$faultloggerd_path/common/dfxlog",
      "$faultloggerd_path/frameworks/unwinder",
      "$faultloggerd_path/tools/process_dump",
      "$faultloggerd_path/interfaces/innerkits/dump_catcher/include",
      "//third_party/libunwind/include",
      "//third_party/libunwind/src",
      "$hilog_lite_include_path",
    ]

    sources = backtrace_local_sources
    sources += [
      "$faultloggerd_path/frameworks/unwinder/dwarf_unwinder.cpp",
      "$faultloggerd_path/frameworks/unwinder/fp_unwinder.cpp",
      "$faultloggerd_path/tools/process_dump/dfx_symbols_cache.cpp",
    ]
    if (target_cpu == "arm") {
      sources += [ "$faultloggerd_path/tools/process_dump/dfx_regs_arm.cpp" ]
    } else if (target_cpu == "arm64") {
      sources += [ "$faultloggerd_path/tools/process_dump/dfx_regs_arm64.cpp" ]
    } else if (target_cpu == "x86_64") {
      sources += [ "$faultloggerd_path/tools/process_dump/dfx_regs_x86_64.cpp" ]
    }

    defines = [
      "HAVE_CONFIG_H",
      "HAVE_ELF_H",
      "HAVE_LINK_H",
    ]

    deps = [
      "$faultloggerd_path/common/dfxlog:static_common_log",
      "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared",
      "//third_party/bounds_checking_function:libsec_shared",
      "//third_party/libunwind:libunwind_local",
    ]
  }
} else {
  config("dfx_backtrace_local_config") {
    visibility = [ "*:*" ]

    include_dirs = [
      "$faultloggerd_path/common",
      "$faultloggerd_path/common/dfxlog",
      "$faultloggerd_path/frameworks/unwinder",
      "$faultloggerd_path/tools/process_dump",
      "$faultloggerd_path/interfaces/innerkits/dump_catcher/include",
      "//third_party/libunwind/include",
      "//third_party/libunwind/src",
    ]

    defines = [
      "HAVE_CONFIG_H",
      "HAVE_ELF_H",
      "HAVE_LINK_H",
    ]
  }

  ohos_source_set("backtrace_local_src") {
    public_configs = [ ":dfx_backtrace_local_config" ]

    sources = backtrace_local_sources

    deps = [
      "$faultloggerd_path/common/dfxlog:static_common_log",
      "$faultloggerd_path/frameworks/unwinder:dfx_unwinder_src",
      "//third_party/bounds_checking_function:libsec_shared",
      "//third_party/libunwind:libunwind_local",
    ]

    external_deps = [
      "c_utils:utils",
      "hilog_native:libhilog",
    ]
    part_name = "faultloggerd"
    subsystem_name = "hiviewdfx"
  }
}
